---
title: "Joining"
editor: visual
---
```{r}
library(dplyr)
library(tidyverse)
```

## Exercises


### Exercise 1: Where are my keys? {.unnumbered}

#### Part a {.unnumbered}

Define two new datasets, with different students and courses:

```{r}
students_2 <- data.frame(
  student = c("D", "E", "F"),
  class = c("COMP 101", "BIOL 101", "POLI 101")
)

# Check it out
students_2

enrollments_2 <- data.frame(
  course = c("ART 101", "BIOL 101", "COMP 101"),
  enrollment = c(18, 20, 19)
)

# Check it out
enrollments_2
```

To connect the course enrollments to the students' courses, try do a `left_join()`.
You get an error!
Identify the problem by reviewing the error message and the datasets we're trying to join.

```{r eval = FALSE}
# eval = FALSE: don't evaluate this chunk when knitting. it produces an error.
#students_2 |> 
 # left_join(enrollments_2)
```

#### Part b {.unnumbered}

The problem is that course name, the **key** or variable that links these two datasets, is labeled differently: `class` in the `students_2` data and `course` in the `enrollments_2` data.
Thus we have to specify these keys in our code:

```{r}
students_2 |> 
  left_join(enrollments_2, join_by(class == course))
```

```{r}
#| eval: false  # keep this false since it will produce an error

# The order of the keys is important:
# join_by("left data key" == "right data key")
# The order is mixed up here, thus we get an error:
#students_2 |> 
 # left_join(enrollments_2, join_by(course == class))
```

#### Part c {.unnumbered}

Define another set of fake data which adds grade information:

```{r}
# Add student grades in each course
students_3 <- data.frame(
  student = c("Y", "Y", "Z", "Z"),
  class = c("COMP 101", "BIOL 101", "POLI 101", "COMP 101"),
  grade = c("B", "S", "C", "A")
)

# Check it out
students_3

# Add average grades in each course
enrollments_3 <- data.frame(
  class = c("ART 101", "BIOL 101","COMP 101"),
  grade = c("B", "A", "A-"),
  enrollment = c(20, 18, 19)
)

# Check it out
enrollments_3
```

Try doing a `left_join()` to link the students' classes to their enrollment info.
Did this work?
Try and figure out the culprit by examining the output.

```{r}
students_3 |> 
  left_join(enrollments_3)
```

#### Part d {.unnumbered}

The issue here is that our datasets have *2* column names in common: `class` and `grade`.
BUT `grade` is measuring 2 different things here: individual student grades in `students_3` and average student grades in `enrollments_3`.
Thus it doesn't make sense to try to join the datasets with respect to this variable.
We can again solve this by specifying that we want to join the datasets using the `class` variable as a *key*.
What are `grade.x` and `grade.y`?

```{r}
students_3 |> 
  left_join(enrollments_3, join_by(class == class))
```

### Exercise 2: More small practice {.unnumbered}

Before applying these ideas to bigger datasets, let's practice identifying which join is appropriate in different scenarios.
Define the following fake data on `voters` (people who *have* voted) and `contact` info for voting age adults (people who *could* vote):

```{r}
# People who have voted
voters <- data.frame(
  id = c("A", "D", "E", "F", "G"),
  times_voted = c(2, 4, 17, 6, 20)
)

voters

# Contact info for voting age adults
contact <- data.frame(
  name = c("A", "B", "C", "D"),
  address = c("summit", "grand", "snelling", "fairview"),
  age = c(24, 89, 43, 38)
)

contact
```

Use the appropriate join for each prompt below.
In each case, think before you type:

-   What dataset goes on the left?
-   What do you want the resulting dataset to look like? How many rows and columns will it have?

```{r}
# 1. We want contact info for people who HAVEN'T voted


# 2. We want contact info for people who HAVE voted
contact|>
  inner_join(voters, join_by(name==id))

# 3. We want any data available on each person
contact|>
  full_join(voters, join_by(name==id))


# 4. When possible, we want to add contact info to the voting roster
contact|>
  left_join(voters, join_by(name==id))

```

### Exercise 3: Bigger datasets {.unnumbered}

Let's apply these ideas to some bigger datasets.
In `grades`, each row is a student-class pair with information on:

-   `sid` = student ID
-   `grade` = student's grade
-   `sessionID` = an identifier of the class section

```{r}
#| echo: false

# Get rid of some duplicate rows!
grades <- read.csv("https://mac-stat.github.io/data/grades.csv") |> 
  distinct(sid, sessionID, .keep_all = TRUE)
head(grades)
```

In `courses`, each row corresponds to a class section with information on:

-   `sessionID` = an identifier of the class section
-   `dept` = department
-   `level` = course level (eg: 100)
-   `sem` = semester
-   `enroll` = enrollment (number of students)
-   `iid` = instructor ID

```{r}
#| echo: false

courses <- read.csv("https://mac-stat.github.io/data/courses.csv")
head(courses)
```

Use R code to take a quick glance at the data.

```{r}
# How many observations (rows) and variables (columns) are there in the grades data?
nrow(grades)
ncol(grades)

# How many observations (rows) and variables (columns) are there in the courses data?
nrow(courses)
ncol(courses)
```

### Exercise 4: Class size {.unnumbered}

How big are the classes?

#### Part a {.unnumbered}

Before digging in, note that some courses are listed twice in the `courses` data:

```{r}
courses |> 
  count(sessionID) |> 
  filter(n > 1)
```

If we pick out just 1 of these, we learn that some courses are cross-listed in multiple departments:

```{r}
courses |> 
  filter(sessionID == "session2047")
```

For our class size exploration, obtain the *total* enrollments in each `sessionID`, combining any cross-listed sections.
Save this as `courses_combined`.
NOTE: There's no joining to do here!

```{r}
 courses_combined <- courses |> 
   group_by(sessionID) |> 
   summarise(enroll = sum(enroll))

# Check that this has 1695 rows and 2 columns
 dim(courses_combined)
```

#### Part b {.unnumbered}

Let's first examine the question of class size from the *administration*'s viewpoint.
To this end, calculate the median class size across all class sections.
(The median is the *middle* or 50th percentile. Unlike the *mean*, it's not skewed by outliers.) THINK FIRST:

-   Which of the 2 datasets do you need to answer this question? One? Both?
-   If you need course information, use `courses_combined` not `courses`.
-   Do you have to do any joining? If so, which dataset will go on the left, i.e. which dataset includes your primary observations of interest? Which join function will you need?

```{r}
median_class_size <- median(courses_combined$enroll)
```

#### Part c {.unnumbered}

But how big are classes from the student perspective?
To this end, calculate the median class size for each individual student.
Once you have the correct output, store it as `student_class_size`.
THINK FIRST:

-   Which of the 2 datasets do you need to answer this question? One? Both?
-   If you need course information, use `courses_combined` not `courses`.
-   Do you have to do any joining? If so, which dataset will go on the left, i.e. which dataset includes your primary observations of interest? Which join function will you need?

```{r}
student_class_size<- courses_combined |>
  left_join(grades, join_by(sessionID)) |>
  group_by(sid) |>
  summarise(median_class_size = median(enroll))


```

#### Part d {.unnumbered}

The median class size varies from student to student.
To get a sense for the typical student experience and range in student experiences, construct and discuss a histogram of the median class sizes experienced by the students.

```{r}
library(ggplot2)


ggplot(student_class_size, aes(x = median_class_size)) + 
  geom_histogram(binwidth = 5, fill = "blue", color = "black") +
  labs(title = "Distribution of Median Class Sizes (Student Perspective)",
       x = "Median Class Size",
       y = "Number of Students") +
  theme_minimal()
```

### Exercise 5: Narrowing in on classes {.unnumbered}

#### Part a {.unnumbered}

Show data on the students that enrolled in `session1986`.
THINK FIRST: Which of the 2 datasets do you need to answer this question?
One?
Both?

```{r}
students_in_session1986 <- courses_combined |> 
  filter(sessionID == "session1986")

head(students_in_session1986)
```

#### Part b {.unnumbered}

Below is a dataset with all courses in department E:

```{r}
dept_E <- courses |> 
  filter(dept == "E")

head(dept_E)
```

What students enrolled in classes in department E?
(We just want info on the students, not the classes.)

```{r}
students_departments <- grades |>
  inner_join(dept_E, by = "sessionID") |>
  select(sid, dept)

head(students_departments)
```

### Exercise 6: All the wrangling {.unnumbered}

Use all of your wrangling skills to answer the following prompts!
THINK FIRST:

-   Think about what tables you might need to join (if any). Identify the corresponding variables to match.
-   You'll need an extra table to convert grades to grade point averages:

```{r}
gpa_conversion <- tibble(
  grade = c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "NC", "AU", "S"), 
  gp = c(4.3, 4, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0, NA, NA)
)

gpa_conversion
```

#### Part a {.unnumbered}

How many total student enrollments are there in each department?
Order from high to low.

```{r}
student_enrollments <- courses |>
  select(dept, enroll) |>
  group_by(dept) |>
  summarise(total_enrollment = sum(enroll)) |>
  arrange(desc(total_enrollment))



```

#### Part b {.unnumbered}

What's the grade-point average (GPA) for each student?

```{r}
student_gpa <- grades |>
  left_join(gpa_conversion, by = "grade") |>
  group_by(sid) |>
  summarise(gpa = mean(gp))

```

#### Part c {.unnumbered}

What's the median GPA across all students?

```{r}
student_gpa |> 
  summarise(median_gpa = median(gpa, na.rm = TRUE))
```

#### Part d {.unnumbered}

What fraction of grades are below B+?

```{r}
grades |> 
  left_join(gpa_conversion) |> 
  mutate(below_b_plus = (gp < 3.3)) |> 
  summarize(mean(below_b_plus, na.rm = TRUE))
```

#### Part e {.unnumbered}

What's the grade-point average for each instructor?
Order from low to high.

```{r}
cross_listed <- courses |> 
  count(sessionID) |> 
  filter(n > 1)

grades |> 
  anti_join(cross_listed) |> 
  inner_join(courses) |> 
  left_join(gpa_conversion) |> 
  group_by(dept) |> 
  summarize(gpa = mean(gp, na.rm = TRUE)) |> 
  arrange(gpa)
```

#### Part f {.unnumbered}

CHALLENGE: Estimate the grade-point average for each department, and sort from low to high.
NOTE: Don't include cross-listed courses.
Students in cross-listed courses could be enrolled under either department, and we do not know which department to assign the grade to.
HINT: You'll need to do multiple joins.

```{r eval = FALSE}
cross_listed <- courses |> 
  count(sessionID) |> 
  filter(n > 1)

grades |> 
  anti_join(cross_listed) |> 
  inner_join(courses) |> 
  left_join(gpa_conversion) |> 
  group_by(dept) |> 
  summarize(gpa = mean(gp, na.rm = TRUE)) |> 
  arrange(gpa)
```

</details>
